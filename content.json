{"pages":[],"posts":[{"title":"BM01 反转链表","text":"原题链接 描述给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。 数据范围： 0≤n≤1000 要求：空间复杂度 O(1) ，时间复杂度 O(n) 。 如当输入链表{1,2,3}时， 经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。 以上转换过程如下图所示： 示例1text12输入：{1,2,3}返回值：{3,2,1} 示例2text123输入：{}返回值：{}说明：空链表则输出空 解题思路由于数据量不大且只需要全反转，因此使用2个辅助节点preNode和nextNode逐个节点倒转即可。其中preNode和nextNode分别初始化为指向**所需更改节点(headNode)**的前一个节点和后一个节点。 ex：需要倒转第一个节点时，preNode节点指向空节点，nextNode指向2号节点。 单节点倒转过程分 3 步： 使head节点指向前一个节点，即preNode.next记录的信息 使preNode.next记录当前节点信息 如果后一个节点不为空则使head与nextNode同时后移，否则说明链表到尾部，preNode置为空结束循环 123456789101112131415161718192021222324252627from hashlib import new# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## @param head ListNode类 # @return ListNode类#class Solution: def ReverseList(self , head: ListNode) -&gt; ListNode: # write code here if head == None: return head preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head","link":"https://guodnuli.github.io/2023/08/06/BM01%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"title":"BM02 链表内指定区间反转","text":"描述将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)，空间复杂度 O(1)。 例如： 给出的链表为 1→2→3→4→5→NULL, m=2,n=4, 返回 1→4→3→2→5→NULL. 数据范围： 链表长度 0&lt;size≤1000，0&lt;m≤n≤size 链表中每个节点的值满足∣val∣≤1000 要求：时间复杂度 O(n) ，空间复杂度 O(n) 进阶：时间复杂度 O(n)，空间复杂度 O(1) 示例1text12输入：{1,2,3,4,5},2,4返回值：{1,4,3,2,5} 示例2text12输入：{5},1,1返回值：{5} 解题思路明确问题与步骤 明确翻转链表的头尾，使用prev与pos进行标记 将头尾之间的链表逐步翻转 当prev为空时说明链表头已被反转后的链表头替代，直接返回heaad节点，否则返回翻转部分的头节点，即cur节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @param m int整型 # @param n int整型 # @return ListNode类#class Solution: def reverseBetween(self , head: ListNode, m: int, n: int) -&gt; ListNode: if head == None or head.next == None or m == n: return head prev = None cur = head pos = None count = 0 while cur != None: count += 1 if count == m - 1: prev = cur if count == n + 1: pos = cur cur = cur.next cur = head if prev == None else prev.next cur2 = cur.next cur.next = pos cashNode = None count = m while count &lt; n: cashNode = cur2.next cur2.next = cur cur = cur2 cur2 = cashNode count += 1 if prev != None: prev.next = cur return head return cur","link":"https://guodnuli.github.io/2023/08/23/BM02%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E9%97%B4%E5%8F%8D%E8%BD%AC/"},{"title":"BM03 链表中的节点每k个一组翻转","text":"描述将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样你不能更改节点中的值，只能更改节点本身。 数据范围： 0≤n≤2000 ，1≤k≤2000 ，链表中每个元素都满足0≤val≤1000 要求：空间复杂度 O(1)，时间复杂度 O(n) 例如： 给定的链表是 1→2→3→4→5 对于 k=2 , 你应该返回 2→1→4→3→5 对于 k=3 , 你应该返回 3→2→1→4→5 示例1text12输入：{1,2,3,4,5},2返回值：{2,1,4,3,5} 示例2text12输入：{},1返回值：{} 解题思路明确问题与策略 计算链表长度 根据长度确定需要进行多少次完整的反转 对每个k节点进行反转 翻转链表的一部分为了简化问题，我们可以先编写一个辅助函数来每次翻转链表的k个节点。 这个函数可以接受链表的开始节点和结束节点，并返回翻转后的链表部分的开始节点和结束节点。 12345def reverse_partial(start: ListNode, end: ListNode) -&gt; (ListNode, ListNode): prev, curr = None, start while curr != end: curr.next, prev, curr = prev, curr, curr.next return prev, start 整合进入主函数现在我们使用reverse_partial函数逐步反转链表，每次翻转k个节点，直到没有足够的节点为止 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param head ListNode类 # @param k int整型 # @return ListNode类#class Solution: def reverseKGroup(self , head: ListNode, k: int) -&gt; ListNode: def reverse_partial(start: ListNode, end: ListNode) -&gt; (ListNode, ListNode): prev, curr = None, start while curr != end: curr.next, prev, curr = prev, curr, curr.next return prev, start if not head or k == 1: return head length = 0 temp = head while temp: length += 1 temp = temp.next if length &lt; k: return head dummy = ListNode(0) dummy.next = head prev_group_end = dummy while length &gt;= k: group_start = prev_group_end.next group_end = prev_group_end.next for _ in range(k): group_end = group_end.next new_start, new_end = reverse_partial(group_start, group_end) prev_group_end.next = new_start new_end.next = group_end prev_group_end = new_end length -= k return dummy.next 首次提交（该答案可读性较差且代码冗余过多）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param head ListNode类 # @param k int整型 # @return ListNode类#class Solution: def reverseKGroup(self , head: ListNode, k: int) -&gt; ListNode: cur = head len = 0 while cur != None: len += 1 cur = cur.next if len &lt; k or len &lt;= 1 or k == 1: return head if len == k: preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head totalgroup = int(len / k) groupcount = 0 cur = head cur2 = cur.next pre = ListNode(None) pre.next = head pos = ListNode(None) lastNode = ListNode(None) while groupcount &lt; totalgroup: groupcount += 1 count = 0 while count &lt; k: cur = cur.next count += 1 if count == k - 1: lastNode = cur if count == k: pos = cur pre.next.next = pos cur = pre.next pre.next = lastNode pre = cur cashNode = None count = 0 while count &lt; k: if count &lt; k - 1: cashNode = cur2.next cur2.next = cur cur = cur2 cur2 = cashNode if groupcount == 1: head = cur else: cur = cur2 cur2 = cur2.next count += 1 return head","link":"https://guodnuli.github.io/2023/08/23/BM03%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/"},{"title":"BM04 合并两个排序的链表","text":"描述输入两个递增的链表，单个链表的长度为n，合并这两个链表并使新链表中的节点仍然是递增排序的。 数据范围：0≤n≤1000，−1000≤节点值≤1000 要求：空间复杂度O(1)，时间复杂度)O(n) 如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示： 或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}，转换过程如下图所示： 示例1text12输入：{1,3,5},{2,4,6}返回值：{1,2,3,4,5,6} 示例2text12输入：{},{}返回值：{} 示例3text12输入：{-1,2,4},{1,3,4}返回值：{-1,1,2,3,4,4} 解题思路明确问题和步骤 由于需要原地操作，所以选定一个链表作为主链表，另外一个链表为合并的副链表 123456789101112131415161718192021222324252627282930313233343536# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param pHead1 ListNode类 # @param pHead2 ListNode类 # @return ListNode类#class Solution: def Merge(self, pHead1: ListNode, pHead2: ListNode) -&gt; ListNode: if not pHead1: return pHead2 if not pHead2: return pHead1 if pHead1.val &gt; pHead2.val: pHead1, pHead2 = pHead2, pHead1 prev = None curr = pHead1 while pHead1 and pHead2: if pHead1.val &lt;= pHead2.val: prev = pHead1 pHead1 = pHead1.next else: prev.next, prev, pHead2.next, pHead2 = pHead2, pHead2, pHead1, pHead2.next if pHead2: prev.next = pHead2 return curr","link":"https://guodnuli.github.io/2023/08/23/BM04%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"},{"title":"BM05 合并k个已排序的链表","text":"描述合并 k 个升序的链表并将结果作为一个升序的链表返回其头节点。 数据范围：节点总数 0≤n≤5000，每个节点的val满足∣val∣&lt;=1000 要求：时间复杂度O(nlogn) 示例1text12输入：[{1,2,3},{4,5,6,7}]返回值：{1,2,3,4,5,6,7} 示例2text12输入：[{1,2},{1,4,5},{6}]返回值：{1,1,2,4,5,6} 解题思路明确问题与步骤 使用冒泡排序在lists中寻找最小值节点，将其放置于列表首位 与BM04相同，使副链表逐步合并进入主链表 异常场景考虑：空节点、两链表不同长度 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param lists ListNode类一维数组 # @return ListNode类#class Solution: def mergeKLists(self , lists: List[ListNode]) -&gt; ListNode: len = lists.__len__() if not lists: return None if len == 1: return lists[0] index = 0 while not lists[0]: index += 1 if lists[index]: lists[0], lists[index] = lists[index], lists[0] if index == len - 1 and not lists[0]: return None for i in list(range(len)): if not lists[i]: pass elif lists[i].val &lt; lists[0].val: lists[i], lists[0] = lists[0], lists[i] cur = lists[0] head = lists[0] pre = ListNode(0) pre.next = cur for i in lists[1:]: if not i: continue addNode = i while cur and addNode: if cur.val &gt; addNode.val: pre.next, addNode.next, pre, addNode = addNode, cur, addNode, addNode.next else: cur, pre = cur.next, cur if addNode: pre.next = addNode cur = head return head","link":"https://guodnuli.github.io/2023/08/25/BM05%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%B7%B2%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"},{"title":"BM06 判断链表中是否有环","text":"描述题目描述文本 判断给定的链表中是否有环。如果有环则返回true，否则返回false。 数据范围：链表长度 0≤n≤10000，链表中任意节点的值满足∣val∣&lt;=100000 要求：空间复杂度 O(1)，时间复杂度 O(n) 输入分为两部分，第一部分为链表，第二部分代表是否有环，然后将组成的head头结点传入到函数里面。-1代表无环，其它的数字代表有环，这些参数解释仅仅是为了方便读者自测调试。实际在编程时读入的是链表的头节点。 例如输入{3,2,0,-4},1时，对应的链表结构如下图所示： 可以看出环的入口结点为从头结点开始的第1个结点（注：头结点为第0个结点），所以输出true。 示例1text123输入：{3,2,0,-4},1返回值：true说明：第一部分{3,2,0,-4}代表一个链表，第二部分的1表示，-4到位置1（注：头结点为位置0），即-4-&gt;2存在一个链接，组成传入的head为一个带环的链表，返回true 示例2text123输入：{1},-1返回值：false说明：第一部分{1}代表一个链表，-1代表无环，组成传入head为一个无环的单链表，返回false 示例3text12输入：{-1,-7,7,-4,19,6,-9,-5,-2,-5},6返回值：true 解题思路正解可以使用快慢指针的做法，详细的数学证明在这里。之后有时间会根据自身的认知写一篇巩固快慢指针的原理。 步骤 链表头设置快慢指针，快指针每次前进2步，慢指针每次前进1步。 此时会有两种情况，第一种便是快指针到达链表尾部，说明没有环；第二种则是有环且快指针跑追上慢指针，两指针相等。 异常情况则是链表为空 123456789101112131415161718192021222324# class ListNode:# def __init__(self, x):# self.val = x# self.next = None# # @param head ListNode类 # @return bool布尔型#class Solution: def hasCycle(self , head: ListNode) -&gt; bool: if not head: return False fastptr = head slowptr = head while fastptr: for _ in list(range(2)): if fastptr.next: fastptr = fastptr.next else: return False slowptr = slowptr.next if fastptr == slowptr: return True 偷懒做法 😛12345678910111213141516171819# class ListNode:# def __init__(self, x):# self.val = x# self.next = None# # @param head ListNode类 # @return bool布尔型#class Solution: def hasCycle(self , head: ListNode) -&gt; bool: if not head: return False len = 0 while head.next: len += 1 head = head.next if len &gt; 10000: return True return False","link":"https://guodnuli.github.io/2023/08/25/BM06%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"}],"tags":[{"name":"链表,牛客网","slug":"链表-牛客网","link":"https://guodnuli.github.io/tags/%E9%93%BE%E8%A1%A8-%E7%89%9B%E5%AE%A2%E7%BD%91/"}],"categories":[{"name":"每日一题","slug":"每日一题","link":"https://guodnuli.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]}