{"pages":[],"posts":[{"title":"BM01 反转链表","text":"原题链接 描述给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。 数据范围： 0≤n≤1000 要求：空间复杂度 O(1) ，时间复杂度 O(n) 。 如当输入链表{1,2,3}时， 经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。 以上转换过程如下图所示： 示例1输入：{1,2,3}返回值：{3,2,1} 示例2输入：{}返回值：{}说明：空链表则输出空 解题思路由于数据量不大且只需要全反转，因此使用2个辅助节点preNode和nextNode逐个节点倒转即可。其中preNode和nextNode分别初始化为指向**所需更改节点(headNode)**的前一个节点和后一个节点。 ex：需要倒转第一个节点时，preNode节点指向空节点，nextNode指向2号节点。 单节点倒转过程分 3 步： 使head节点指向前一个节点，即preNode.next记录的信息 使preNode.next记录当前节点信息 如果后一个节点不为空则使head与nextNode同时后移，否则说明链表到尾部，preNode置为空结束循环 123456789101112131415161718192021222324252627from hashlib import new# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## @param head ListNode类 # @return ListNode类#class Solution: def ReverseList(self , head: ListNode) -&gt; ListNode: # write code here if head == None: return head preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head","link":"https://guodnuli.github.io/2023/08/06/BM01%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"title":"","text":"BM02链表内指定区间反转描述将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 O(n)，空间复杂度 O(1)。 例如： 给出的链表为 1→2→3→4→5→NULL, m=2,n=4, 返回 1→4→3→2→5→NULL. 数据范围： 链表长度 0&lt;size≤1000，0&lt;m≤n≤size 链表中每个节点的值满足∣val∣≤1000 要求：时间复杂度 O(n) ，空间复杂度 O(n) 进阶：时间复杂度 O(n)，空间复杂度 O(1) 示例1输入：{1,2,3,4,5},2,4返回值：{1,4,3,2,5} 示例2输入：{5},1,1返回值：{5} 解题思路明确问题与步骤 明确翻转链表的头尾，使用prev与pos进行标记 将头尾之间的链表逐步翻转 当prev为空时说明链表头已被反转后的链表头替代，直接返回heaad节点，否则返回翻转部分的头节点，即cur节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @param m int整型 # @param n int整型 # @return ListNode类#class Solution: def reverseBetween(self , head: ListNode, m: int, n: int) -&gt; ListNode: if head == None or head.next == None or m == n: return head prev = None cur = head pos = None count = 0 while cur != None: count += 1 if count == m - 1: prev = cur if count == n + 1: pos = cur cur = cur.next cur = head if prev == None else prev.next cur2 = cur.next cur.next = pos cashNode = None count = m while count &lt; n: cashNode = cur2.next cur2.next = cur cur = cur2 cur2 = cashNode count += 1 if prev != None: prev.next = cur return head return cur","link":"https://guodnuli.github.io/2023/08/23/BM02%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E9%97%B4%E5%8F%8D%E8%BD%AC/"}],"tags":[{"name":"链表","slug":"链表","link":"https://guodnuli.github.io/tags/%E9%93%BE%E8%A1%A8/"}],"categories":[{"name":"每日一题","slug":"每日一题","link":"https://guodnuli.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]}