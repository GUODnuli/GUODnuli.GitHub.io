{"pages":[],"posts":[{"title":"BM01 反转链表","text":"原题链接 描述给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是1)，长度为n，反转该链表后，返回新链表的表头。 数据范围： 0≤n≤1000 要求：空间复杂度 O(1) ，时间复杂度 O(n) 。 如当输入链表{1,2,3}时， 经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。 以上转换过程如下图所示： https://uploadfiles.nowcoder.com/images/20211014/423483716_1634206291971/4A47A0DB6E60853DEDFCFDF08A5CA249 示例1输入：{1,2,3}返回值：{3,2,1} 示例2输入：{}返回值：{}说明：空链表则输出空 解题思路由于数据量不大且只需要全反转，因此使用2个辅助节点preNode和nextNode逐个节点倒转即可。其中preNode和nextNode分别初始化为指向**所需更改节点(headNode)**的前一个节点和后一个节点。 ex：需要倒转第一个节点时，preNode节点指向空节点，nextNode指向2号节点。 单节点倒转过程分 3 步： 使head节点指向前一个节点，即preNode.next记录的信息 使preNode.next记录当前节点信息 如果后一个节点不为空则使head与nextNode同时后移，否则说明链表到尾部，preNode置为空结束循环 123456789101112131415161718192021222324252627from hashlib import new# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## @param head ListNode类 # @return ListNode类#class Solution: def ReverseList(self , head: ListNode) -&gt; ListNode: # write code here if head == None: return head preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head","link":"/GUODnuli/GUODnuli.GitHub.io/2023/08/06/BM01%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"}],"tags":[{"name":"链表","slug":"链表","link":"/GUODnuli/GUODnuli.GitHub.io/tags/%E9%93%BE%E8%A1%A8/"}],"categories":[{"name":"每日一题","slug":"每日一题","link":"/GUODnuli/GUODnuli.GitHub.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]}