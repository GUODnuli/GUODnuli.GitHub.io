{"pages":[],"posts":[{"title":"BM01 反转链表","text":"描述给定一个单链表的头结点pHead(该头节点是有值的，比如在下图，它的val是)，长度为，反转该链表后，返回新链表的表头。 数据范围： 要求：空间复杂度，时间复杂度。 如当输入链表{1,2,3}时， 经反转后，原链表变为{3,2,1}，所以对应的输出为{3,2,1}。 以上转换过程如下图所示： 示例1text12输入：{1,2,3}返回值：{3,2,1} 示例2text123输入：{}返回值：{}说明：空链表则输出空 解题思路由于数据量不大且只需要全反转，因此使用2个辅助节点preNode和nextNode逐个节点倒转即可。其中preNode和nextNode分别初始化为指向**所需更改节点(headNode)**的前一个节点和后一个节点。 ex：需要倒转第一个节点时，preNode节点指向空节点，nextNode指向2号节点。 单节点倒转过程分步： 使head节点指向前一个节点，即preNode.next记录的信息 使preNode.next记录当前节点信息 如果后一个节点不为空则使head与nextNode同时后移，否则说明链表到尾部，preNode置为空结束循环 123456789101112131415161718192021222324252627from hashlib import new# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## @param head ListNode类 # @return ListNode类#class Solution: def ReverseList(self , head: ListNode) -&gt; ListNode: # write code here if head == None: return head preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head","link":"https://guodnuli.github.io/2023/08/06/BM01%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"title":"BM02 链表内指定区间反转","text":"描述将一个节点数为链表位置到位置之间的区间反转，要求时间复杂度，空间复杂度。 例如： 给出的链表为 , ,, 返回 . 数据范围：链表长度， 链表中每个节点的值满足 要求：时间复杂度，空间复杂度 进阶：时间复杂度，空间复杂度 示例1text12输入：{1,2,3,4,5},2,4返回值：{1,4,3,2,5} 示例2text12输入：{5},1,1返回值：{5} 解题思路明确问题与步骤 明确翻转链表的头尾，使用prev与pos进行标记 将头尾之间的链表逐步翻转 当prev为空时说明链表头已被反转后的链表头替代，直接返回heaad节点，否则返回翻转部分的头节点，即cur节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @param m int整型 # @param n int整型 # @return ListNode类#class Solution: def reverseBetween(self , head: ListNode, m: int, n: int) -&gt; ListNode: if head == None or head.next == None or m == n: return head prev = None cur = head pos = None count = 0 while cur != None: count += 1 if count == m - 1: prev = cur if count == n + 1: pos = cur cur = cur.next cur = head if prev == None else prev.next cur2 = cur.next cur.next = pos cashNode = None count = m while count &lt; n: cashNode = cur2.next cur2.next = cur cur = cur2 cur2 = cashNode count += 1 if prev != None: prev.next = cur return head return cur","link":"https://guodnuli.github.io/2023/08/23/BM02%E9%93%BE%E8%A1%A8%E5%86%85%E6%8C%87%E5%AE%9A%E5%8C%BA%E9%97%B4%E5%8F%8D%E8%BD%AC/"},{"title":"BM03 链表中的节点每k个一组翻转","text":"描述将给出的链表中的节点每个一组翻转，返回翻转后的链表如果链表中的节点数不是的倍数，将最后剩下的节点保持原样你不能更改节点中的值，只能更改节点本身。 数据范围： ，，链表中每个元素都满足 要求：空间复杂度，时间复杂度 例如： 给定的链表是 对于, 你应该返回 对于, 你应该返回 示例1text12输入：{1,2,3,4,5},2返回值：{2,1,4,3,5} 示例2text12输入：{},1返回值：{} 解题思路明确问题与策略 计算链表长度 根据长度确定需要进行多少次完整的反转 对每个k节点进行反转 翻转链表的一部分为了简化问题，我们可以先编写一个辅助函数来每次翻转链表的k个节点。 这个函数可以接受链表的开始节点和结束节点，并返回翻转后的链表部分的开始节点和结束节点。 12345def reverse_partial(start: ListNode, end: ListNode) -&gt; (ListNode, ListNode): prev, curr = None, start while curr != end: curr.next, prev, curr = prev, curr, curr.next return prev, start 整合进入主函数现在我们使用reverse_partial函数逐步反转链表，每次翻转k个节点，直到没有足够的节点为止 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param head ListNode类 # @param k int整型 # @return ListNode类#class Solution: def reverseKGroup(self , head: ListNode, k: int) -&gt; ListNode: def reverse_partial(start: ListNode, end: ListNode) -&gt; (ListNode, ListNode): prev, curr = None, start while curr != end: curr.next, prev, curr = prev, curr, curr.next return prev, start if not head or k == 1: return head length = 0 temp = head while temp: length += 1 temp = temp.next if length &lt; k: return head dummy = ListNode(0) dummy.next = head prev_group_end = dummy while length &gt;= k: group_start = prev_group_end.next group_end = prev_group_end.next for _ in range(k): group_end = group_end.next new_start, new_end = reverse_partial(group_start, group_end) prev_group_end.next = new_start new_end.next = group_end prev_group_end = new_end length -= k return dummy.next 首次提交（该答案可读性较差且代码冗余过多）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param head ListNode类 # @param k int整型 # @return ListNode类#class Solution: def reverseKGroup(self , head: ListNode, k: int) -&gt; ListNode: cur = head len = 0 while cur != None: len += 1 cur = cur.next if len &lt; k or len &lt;= 1 or k == 1: return head if len == k: preNode = ListNode(1) nextNode = head.next while preNode != None: head.next = preNode.next preNode.next = head if nextNode != None: head = nextNode nextNode = nextNode.next else: preNode = None return head totalgroup = int(len / k) groupcount = 0 cur = head cur2 = cur.next pre = ListNode(None) pre.next = head pos = ListNode(None) lastNode = ListNode(None) while groupcount &lt; totalgroup: groupcount += 1 count = 0 while count &lt; k: cur = cur.next count += 1 if count == k - 1: lastNode = cur if count == k: pos = cur pre.next.next = pos cur = pre.next pre.next = lastNode pre = cur cashNode = None count = 0 while count &lt; k: if count &lt; k - 1: cashNode = cur2.next cur2.next = cur cur = cur2 cur2 = cashNode if groupcount == 1: head = cur else: cur = cur2 cur2 = cur2.next count += 1 return head","link":"https://guodnuli.github.io/2023/08/23/BM03%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC/"},{"title":"BM04 合并两个排序的链表","text":"描述输入两个递增的链表，单个链表的长度为，合并这两个链表并使新链表中的节点仍然是递增排序的。 数据范围：，节点值 要求：空间复杂度，时间复杂度 如输入{1,3,5},{2,4,6}时，合并后的链表为{1,2,3,4,5,6}，所以对应的输出为{1,2,3,4,5,6}，转换过程如下图所示： 或输入{-1,2,4},{1,3,4}时，合并后的链表为{-1,1,2,3,4,4}，所以对应的输出为{-1,1,2,3,4,4}，转换过程如下图所示： 示例1text12输入：{1,3,5},{2,4,6}返回值：{1,2,3,4,5,6} 示例2text12输入：{},{}返回值：{} 示例3text12输入：{-1,2,4},{1,3,4}返回值：{-1,1,2,3,4,4} 解题思路明确问题和步骤 由于需要原地操作，所以选定一个链表作为主链表，另外一个链表为合并的副链表 123456789101112131415161718192021222324252627282930313233343536# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param pHead1 ListNode类 # @param pHead2 ListNode类 # @return ListNode类#class Solution: def Merge(self, pHead1: ListNode, pHead2: ListNode) -&gt; ListNode: if not pHead1: return pHead2 if not pHead2: return pHead1 if pHead1.val &gt; pHead2.val: pHead1, pHead2 = pHead2, pHead1 prev = None curr = pHead1 while pHead1 and pHead2: if pHead1.val &lt;= pHead2.val: prev = pHead1 pHead1 = pHead1.next else: prev.next, prev, pHead2.next, pHead2 = pHead2, pHead2, pHead1, pHead2.next if pHead2: prev.next = pHead2 return curr","link":"https://guodnuli.github.io/2023/08/23/BM04%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"},{"title":"BM06 判断链表中是否有环","text":"描述题目描述文本 判断给定的链表中是否有环。如果有环则返回，否则返回。 数据范围：链表长度 ，链表中任意节点的值满足 要求：空间复杂度，时间复杂度 输入分为两部分，第一部分为链表，第二部分代表是否有环，然后将组成的head头结点传入到函数里面。代表无环，其它的数字代表有环，这些参数解释仅仅是为了方便读者自测调试。实际在编程时读入的是链表的头节点。 例如输入{3,2,0,-4},1时，对应的链表结构如下图所示： 可以看出环的入口结点为从头结点开始的第个结点（注：头结点为第个结点），所以输出。 示例1text123输入：{3,2,0,-4},1返回值：true说明：第一部分{3,2,0,-4}代表一个链表，第二部分的1表示，-4到位置1（注：头结点为位置0），即-4-&gt;2存在一个链接，组成传入的head为一个带环的链表，返回true 示例2text123输入：{1},-1返回值：false说明：第一部分{1}代表一个链表，-1代表无环，组成传入head为一个无环的单链表，返回false 示例3text12输入：{-1,-7,7,-4,19,6,-9,-5,-2,-5},6返回值：true 解题思路正解可以使用快慢指针的做法，详细的数学证明在这里。 步骤 链表头设置快慢指针，快指针每次前进2步，慢指针每次前进1步。 此时会有两种情况，第一种便是快指针到达链表尾部，说明没有环；第二种则是有环且快指针跑追上慢指针，两指针相等。 异常情况则是链表为空 123456789101112131415161718192021222324# class ListNode:# def __init__(self, x):# self.val = x# self.next = None# # @param head ListNode类 # @return bool布尔型#class Solution: def hasCycle(self , head: ListNode) -&gt; bool: if not head: return False fastptr = head slowptr = head while fastptr: for _ in list(range(2)): if fastptr.next: fastptr = fastptr.next else: return False slowptr = slowptr.next if fastptr == slowptr: return True 偷懒做法 😛12345678910111213141516171819# class ListNode:# def __init__(self, x):# self.val = x# self.next = None# # @param head ListNode类 # @return bool布尔型#class Solution: def hasCycle(self , head: ListNode) -&gt; bool: if not head: return False len = 0 while head.next: len += 1 head = head.next if len &gt; 10000: return True return False","link":"https://guodnuli.github.io/2023/08/25/BM06%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"},{"title":"BM05 合并k个已排序的链表","text":"描述合并个升序的链表并将结果作为一个升序的链表返回其头节点。 数据范围：节点总数 ，每个节点的val满足 要求：时间复杂度 示例1text12输入：[{1,2,3},{4,5,6,7}]返回值：{1,2,3,4,5,6,7} 示例2text12输入：[{1,2},{1,4,5},{6}]返回值：{1,1,2,4,5,6} 解题思路明确问题与步骤 使用冒泡排序在lists中寻找最小值节点，将其放置于列表首位 与BM04相同，使副链表逐步合并进入主链表 异常场景考虑：空节点、两链表不同长度 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param lists ListNode类一维数组 # @return ListNode类#class Solution: def mergeKLists(self , lists: List[ListNode]) -&gt; ListNode: len = lists.__len__() if not lists: return None if len == 1: return lists[0] index = 0 while not lists[0]: index += 1 if lists[index]: lists[0], lists[index] = lists[index], lists[0] if index == len - 1 and not lists[0]: return None for i in list(range(len)): if not lists[i]: pass elif lists[i].val &lt; lists[0].val: lists[i], lists[0] = lists[0], lists[i] cur = lists[0] head = lists[0] pre = ListNode(0) pre.next = cur for i in lists[1:]: if not i: continue addNode = i while cur and addNode: if cur.val &gt; addNode.val: pre.next, addNode.next, pre, addNode = addNode, cur, addNode, addNode.next else: cur, pre = cur.next, cur if addNode: pre.next = addNode cur = head return head","link":"https://guodnuli.github.io/2023/08/25/BM05%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%B7%B2%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"},{"title":"BM07 链表中环的入口结点","text":"描述给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null。 数据范围： ，结点值 要求：空间复杂度，时间复杂度 例如，输入{1,2},{3,4,5}时，对应的环形链表如下图所示： 可以看到环的入口结点的结点值为，所以返回结点值为的结点。 输入描述输入分为段，第一段是入环前的链表部分，第二段是链表环的部分，后台会根据第二段是否为空将这两段组装成一个无环或者有环单链表 返回值描述返回链表的环的入口结点即可，我们后台程序会打印这个结点对应的结点值；若没有，则返回对应编程语言的空结点即可。 示例1text123输入：{1,2},{3,4,5}返回值：3说明：返回环形链表入口结点，我们后台程序会打印该环形链表入口结点对应的结点值，即3 示例2text123输入：{1},{}返回值：\"null\"说明：没有环，返回对应编程语言的空结点，后台程序会打印\"null\" 示例3text123输入：{},{2}返回值：2说明：环的部分只有一个结点，所以返回该环形链表入口结点，后台程序打印该结点对应的结点值，即2 解题思路明确问题与步骤与BM06相同，使用快慢指针解题，详细数学证明在这里。具体做法如下 设置快慢指针，起点均为头部指针。快指针每次走两步，慢指针每次走一步。 若快指针遇到结尾，即空节点，说明没有环。 若快慢指针相遇，则说明有环，此时退出第一个循环，并重新设置一个头指针ptr。 ptr与慢指针相同每次走一步，当ptr与慢指针遭遇时，遭遇时的节点即为入环节点。 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def EntryNodeOfLoop(self, pHead): if not pHead: return None fastptr = pHead slowptr = pHead while fastptr: for _ in list(range(2)): if fastptr.next: fastptr = fastptr.next else: return None slowptr = slowptr.next if fastptr == slowptr: break ptr = pHead while ptr != slowptr: ptr = ptr.next slowptr = slowptr.next return ptr","link":"https://guodnuli.github.io/2023/08/26/BM07%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/"},{"title":"BM08 链表中倒数最后k个结点","text":"描述输入一个长度为的链表，设链表中的元素的值为，返回该链表中倒数第个节点。 如果该链表长度小于，请返回一个长度为的链表。 数据范围：，， 要求：空间复杂度 ，时间复杂度 进阶：空间复杂度 ，时间复杂度 例如输入{1,2,3,4,5},2时，对应的链表结构如下图所示： 其中蓝色部分为该链表的最后个结点，所以返回倒数第个结点（也即结点值为的结点）即可，系统会打印后面所有的节点来比较。 示例1text123输入：{1,2,3,4,5},2返回值：{4,5}说明：返回倒数第2个节点4，系统会打印后面所有的节点来比较。 示例2text12输入：{2},8返回值：{} 解题思路明确问题与步骤 循环取得链表长度 设置答案节点ans，循环次后返回即可 异常场景：链表为空，， 12345678910111213141516171819202122232425262728293031# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param pHead ListNode类 # @param k int整型 # @return ListNode类#class Solution: def FindKthToTail(self , pHead: ListNode, k: int) -&gt; ListNode: if not pHead and k == 0: return None len = 0 curr = pHead while curr: len += 1 curr = curr.next if len &lt; k: return None ans = pHead for i in list(range(len - k)): ans = ans.next return ans","link":"https://guodnuli.github.io/2023/08/26/BM08%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E6%9C%80%E5%90%8Ek%E4%B8%AA%E7%BB%93%E7%82%B9/"},{"title":"BM09 删除链表的倒数第n个节点","text":"描述给定一个链表，删除链表的倒数第个节点并返回链表的头指针例如， 给出的链表为:, . 删除了链表的倒数第个节点之后,链表变为. 数据范围：链表长度，链表中任意节点的值满足 要求：空间复杂度，时间复杂度 备注：题目保证一定是有效的 示例1text12输入：{1,2},2返回值：{2} 解题思路 循环取得链表长度后再次循环找到倒数第n个节点，修改前节点后驱即可 1234567891011121314151617181920212223242526272829303132333435# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @param n int整型 # @return ListNode类#class Solution: def removeNthFromEnd(self , head: ListNode, n: int) -&gt; ListNode: if not head: return None if n == 0: return head curr = head len = 0 while curr: len += 1 curr = curr.next if len == n: return head.next pre = ListNode(0) pre.next = head curr = head for i in list(range(len - n)): curr, pre = curr.next, pre.next pre.next, curr.next = curr.next, None return head","link":"https://guodnuli.github.io/2023/08/27/BM09%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"title":"BM10 两个链表的第一个公共结点","text":"描述输入两个无环的单向链表，找出它们的第一个公共结点，如果没有公共节点则返回空。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的） 数据范围： 要求：空间复杂度，时间复杂度 例如，输入{1,2,3},{4,5},{6,7}时，两个无环的单向链表的结构如下图所示： 可以看到它们的第一个公共结点的结点值为，所以返回结点值为的结点。 输入描述输入分为是段，第一段是第一个链表的非公共部分，第二段是第二个链表的非公共部分，第三段是第一个链表和第二个链表的公共部分。 后台会将这3个参数组装为两个链表，并将这两个链表对应的头节点传入到函数FindFirstCommonNode里面，用户得到的输入只有pHead1和pHead2。 返回值描述返回传入的pHead1和pHead2的第一个公共结点，后台会打印以该节点为头节点的链表。 示例1text12345输入：{1,2,3},{4,5},{6,7}返回值：{6,7}说明：第一个参数{1,2,3}代表是第一个链表非公共部分，第二个参数{4,5}代表是第二个链表非公共部分，最后的{6,7}表示的是2个链表的公共部分这3个参数最后在后台会组装成为2个两个无环的单链表，且是有公共节点的 示例2text123输入：{1},{2,3},{}返回值：{}说明：2个链表没有公共节点 ,返回null，后台打印{} 解题思路明确问题与步骤 定义get_list_len函数取得两链表长度 123456def get_list_len(pHead) -&gt; int: len = 0 while pHead: len += 1 pHead = pHead.next return len 根据两链表长度，使ptr1始终保持长链 使长链指针先移动len1-len2长度 再同时移动两指针直至相遇或ptr1和ptr2均为None时返回答案 异常情况：其中任意一个头指针为空时返回None 1234567891011121314151617181920212223242526272829303132333435363738394041424344# class ListNode:# def __init__(self, x):# self.val = x# self.next = None# # @param pHead1 ListNode类 # @param pHead2 ListNode类 # @return ListNode类#class Solution: def FindFirstCommonNode(self, pHead1, pHead2) -&gt; ListNode: def get_list_len(pHead) -&gt; int: len = 0 while pHead: len += 1 pHead = pHead.next return len if not pHead1 or not pHead2: return None ptr1 = pHead1 ptr2 = pHead2 len1 = get_list_len(ptr1) len2 = get_list_len(ptr2) if len1 == 0: return pHead1 elif len2 == 0: return pHead2 ptr1 = pHead1 ptr2 = pHead2 if len1 &lt; len2: len1, len2 = len2, len1 ptr1, ptr2 = ptr2, ptr1 for _ in list(range(len1 - len2)): ptr1 = ptr1.next while ptr1: if ptr1 == ptr2: return ptr1 ptr1, ptr2 = ptr1.next, ptr2.next","link":"https://guodnuli.github.io/2023/08/27/BM10%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%BB%93%E7%82%B9/"},{"title":"BM11 链表相加(二)","text":"描述假设链表中每一个节点的值都在之间，那么链表整体就可以代表一个整数。 给定两个这种链表，请生成代表两个整数相加值的结果链表。 数据范围：，链表任意值 要求：空间复杂度，时间复杂度 例如： 链表为 ，链表为，最后生成新的结果链表为 示例1text12输入：[9,3,7],[6,3]返回值：{1,0,0,0} 示例2text12输入：[0],[6,3]返回值：{6,3} 备注 解题思路 翻转两链表并比较两链表长度，置head1为长链表指针 从低位开始相加，使用carry记录进位信息 双链表相加结束后将长链表剩余位数连接，同样使用carry记录进位 最后翻转结果链表并返回 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head1 ListNode类 # @param head2 ListNode类 # @return ListNode类#class Solution: def addInList(self , head1: ListNode, head2: ListNode) -&gt; ListNode: def reverseList(head: ListNode) -&gt; ListNode: preNode = ListNode(0) nextNode = head.next while preNode: head.next = preNode.next preNode.next = head if nextNode: head = nextNode nextNode = nextNode.next else: preNode = None return head def compareListSize(head1: ListNode, head2: ListNode) -&gt; bool: while head1 and head2: head1 = head1.next head2 = head2.next if head1: return True else: return False if not head1: return head2 elif not head2: return head1 head1 = reverseList(head1) head2 = reverseList(head2) cur1, cur2 = head1, head2 if not compareListSize(cur1, cur2): head1, head2 = head2, head1 preNode = ListNode(0) curr = preNode carry = False while head1 and head2: val = head1.val + head2.val if carry: val += 1 if val &gt; 9: val %= 10 carry = True else: carry = False curr.next= ListNode(val) curr = curr.next head1, head2 = head1.next, head2.next while head1: val = head1.val if carry: val += 1 if val &gt; 9: val %= 10 carry = True else: carry = False curr.next= ListNode(val) curr = curr.next head1 = head1.next return reverseList(preNode.next)","link":"https://guodnuli.github.io/2023/08/28/BM11%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0-%E4%BA%8C/"},{"title":"BM12 单链表的排序","text":"描述给定一个节点数为n的无序单链表，对其按升序排序。 数据范围：，保证节点权值在之内。 要求：空间复杂度$O(n)，时间复杂度O(nlogn)$ 示例1text12输入：[1,3,2,4,5]返回值：{1,2,3,4,5} 示例2text12输入：[-1,0,-2]返回值：{-2,-1,0} 解题思路解法1：使用支持随机读写的数据结构复制数据域，如python中的list，再用排序算法在list中排序后全部赋值到链表中。 解法2：将排序算法改造为链表适用后直接在链表上进行排序。 该题的数据量比较大，使用解法1会超时，因此使用第二种解法，使用归并排序。 明确步骤 使用快慢指针将链表分为2部分，当不可再分时返回节点 合并左右两边为一个大的部分并返回 递归地调用1和2步即可返回1个完全排序的链表 12345678910111213141516171819202122232425262728293031323334353637383940414243444546# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param head ListNode类 the head node# @return ListNode类#class Solution: def sortInList(self , head: ListNode) -&gt; ListNode: def mergesort(head: ListNode) -&gt; ListNode: if not head or not head.next: return head fastptr, slowptr = head, head while fastptr.next and fastptr.next.next: fastptr = fastptr.next.next slowptr = slowptr.next middle, slowptr.next = slowptr.next, None left = mergesort(head) right = mergesort(middle) return merge(left, right) def merge(left: ListNode, right: ListNode) -&gt; ListNode: dummy = ListNode(0) curr = dummy while left and right: if left.val &lt;= right.val: curr.next, left= left, left.next curr = curr.next else: curr.next, right = right, right.next curr = curr.next if left: curr.next = left if right: curr.next = right return dummy.next return mergesort(head)","link":"https://guodnuli.github.io/2023/08/28/BM12%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8E%92%E5%BA%8F/"},{"title":"BM13 判断一个链表是否为回文结构","text":"描述给定一个链表，请判断该链表是否为回文结构。 回文是指该字符串正序逆序完全一致。 数据范围： 链表节点数，链表中每个节点的值满足 示例1text12输入：{1}返回值：true 示例2text123输入：{2,1}返回值：false说明：2-&gt;1 示例3text123输入：{1,2,2,1}返回值：true说明：1-&gt;2-&gt;2-&gt;1 解题思路 使用快慢指针从中点断开链表 将后一段链表倒转 前链表从头读取，后链表从尾读取，逐个比较，当不相等时返回false，当其中一个为None时还没有出现不相等的情况则返回true 123456789101112131415161718192021222324252627282930313233343536373839404142# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 the head# @return bool布尔型#class Solution: def isPail(self , head: ListNode) -&gt; bool: def reverseList(head: ListNode) -&gt; ListNode: preNode = ListNode(0) nextNode = head.next while preNode: head.next = preNode.next preNode.next = head if nextNode: head = nextNode nextNode = nextNode.next else: preNode = None return head if not head or not head.next: return True fast = head slow = head while fast.next and fast.next.next: slow, fast = slow.next, fast.next.next mid, slow.next = slow.next, None mid = reverseList(mid) while mid and head: if mid.val != head.val: return False mid, head = mid.next, head.next return True","link":"https://guodnuli.github.io/2023/08/28/BM13%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/"},{"title":"BM14 链表的奇偶重排","text":"描述给定一个单链表，请设定一个函数，将链表的奇数位节点和偶数位节点分别放在一起，重排后输出。 注意是节点的编号而非节点的数值。 数据范围：节点数量满足，节点中的值都满足 要求：空间复杂度，时间复杂度 示例1text123456输入：{1,2,3,4,5,6}返回值：{1,3,5,2,4,6}说明：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;NULL重排后为1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;6-&gt;NULL 示例2text1234567输入：{1,4,6,3,7}返回值：{1,6,7,4,3}说明：1-&gt;4-&gt;6-&gt;3-&gt;7-&gt;NULL重排后为1-&gt;6-&gt;7-&gt;4-&gt;3-&gt;NULL奇数位节点有1,6,7，偶数位节点有4,3。重排后为1,6,7,4,3 备注text1链表长度不大于200000。每个数范围均在int内。 解题思路 新建两个哨兵结点dummyOdd与dummyEven分别建立奇数链表和偶数链表，并使用flag作为奇偶标志位 交替向两个链表添加节点，以flag的bool值作为标准 添加完毕后将偶数链表接到奇数链表后并返回即可 1234567891011121314151617181920212223242526272829303132333435# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @return ListNode类#class Solution: def oddEvenList(self , head: ListNode) -&gt; ListNode: if not head: return None dummyOdd = ListNode(0) dummyEven = ListNode(0) currOdd = dummyOdd currEven = dummyEven flag = True # 真为奇数,假为偶数 while head: if flag: currOdd.next, head = head, head.next currOdd = currOdd.next currOdd.next = None flag = False else: currEven.next, head= head, head.next currEven = currEven.next currEven.next = None flag = True currOdd.next = dummyEven.next return dummyOdd.next","link":"https://guodnuli.github.io/2023/08/28/BM14%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A5%87%E5%81%B6%E9%87%8D%E6%8E%92/"},{"title":"BM15 删除有序链表中重复的元素-I","text":"描述删除给出链表中的重复元素（链表中元素从小到大有序），使链表中的所有元素都只出现一次 例如： 给出的链表为，返回 给出的链表为，返回 数据范围：链表长度满足，链表中任意节点的值满足 进阶：空间复杂度，时间复杂度 示例1text12输入：{1,1,2}返回值：{1,2} 示例2text12输入：{}返回值：{} 解题思路 设置一前一后两个指针，当后指针数值与前指针相等时更改前指针的后驱为后指针的后驱实现跳过相同数值的节点 1234567891011121314151617181920212223# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param head ListNode类 # @return ListNode类#class Solution: def deleteDuplicates(self , head: ListNode) -&gt; ListNode: if not head or not head.next: return head curr = head pos = head.next while pos: if curr.val == pos.val: curr.next, pos = pos.next, pos.next else: curr, pos = curr.next, pos.next return head","link":"https://guodnuli.github.io/2023/08/28/BM15%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-I/"},{"title":"BM16 删除有序链表中重复的元素-II","text":"描述给出一个升序排序的链表，删除链表中的所有重复出现的元素，只保留原链表中只出现一次的元素。 例如： 给出的链表为 返回 给出的链表为 返回 数据范围：链表长度，链表中的值满足 要求：空间复杂度，时间复杂度 进阶：空间复杂度，时间复杂度 示例1text12输入：{1,2,2}返回值：{1} 示例2text12输入：{}返回值：{} 解题思路 设置三个节点，prev跳过区间的前节点，start跳过区间头节点，end跳过区间尾节点 当头节点值与尾节点值相等时找到重复值的尾部，调整prev指向end后一个节点并后移start和end 1234567891011121314151617181920212223242526272829303132333435# class ListNode:# def __init__(self, x):# self.val = x# self.next = None## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可# # @param head ListNode类 # @return ListNode类#class Solution: def deleteDuplicates(self , head: ListNode) -&gt; ListNode: if not head: return head dummyNode = ListNode(0) prev = dummyNode prev.next = head start = head end = start.next while end: if start.val == end.val: while end.next and end.val == end.next.val: end = end.next prev.next = end.next if not prev.next: return dummyNode.next start = prev.next end = start.next else: prev = prev.next end = end.next start = start.next return dummyNode.next","link":"https://guodnuli.github.io/2023/08/28/BM16%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%85%83%E7%B4%A0-II/"},{"title":"BM17 二分查找-I","text":"描述请实现无重复数字的升序数组的二分查找 给定一个 元素升序的、无重复数字的整型数组nums和一个目标值 target，写一个函数搜索nums中的target，如果目标值存在返回下标（下标从开始），否则返回 数据范围： ， 数组中任意值满足 进阶：时间复杂度，空间复杂度 示例1text123输入：[-1,0,3,4,6,10,13,14],13返回值：6说明：13 出现在nums中并且下标为 6 示例2text123输入：[],3返回值：-1说明：nums为空，返回-1 示例3text123输入：[-1,0,3,4,6,10,13,14],2返回值：-1说明：2不存在nums中因此返回-1 备注text12数组元素长度在$[0,10000]$之间数组每个元素都在[-9999, 9999]之间。 解题思路实现二分查找即可 函数操作步骤 检查左右边界值，当左右边界值相等或右小于左时说明无目标值，返回 比较子数组中点值是否为目标值，相等时返回索引middle 根据目标值大小递归调用函数，目标值小于当前中点值则搜索前半部分，大于则搜索后半部分 123456789101112131415161718192021222324## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param nums int整型一维数组 # @param target int整型 # @return int整型#class Solution: def search(self , nums: List[int], target: int) -&gt; int: def binarySearch(nums: List[int], target: int, left: int, right: int) -&gt; int: if left &lt;= right: middle = left + (right - left) // 2 if nums[middle] == target: return middle elif nums[middle] &lt; target: return binarySearch(nums, target, middle + 1, right) else: return binarySearch(nums, target, left, middle - 1) else: return -1 if not nums: return -1 return binarySearch(nums, target, 0, nums.__len__() - 1)/ 优化前代码由于递归调用时使用了List切片运算，创建了新的子列表，导致了额外的内存分配和额外的赋值操作，算法效率低，在提交时应该是爆内存了导致没有AC 123456789101112131415161718192021222324## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param nums int整型一维数组 # @param target int整型 # @return int整型#class Solution: def search(self , nums: List[int], target: int) -&gt; int: def binarySearch(nums: List[int], target: int, index: int) -&gt; int: middle = int(nums.__len__()/2) if nums.__len__() == 1 and nums[0] != target: return -1 if nums[middle] == target: return middle + index elif nums[middle] &lt; target: return binarySearch(nums[middle:], target, middle) elif nums[middle] &gt; target: return binarySearch(nums[:middle], target, index + 0) if not nums: return -1 return binarySearch(nums, target, 0)","link":"https://guodnuli.github.io/2023/08/28/BM17%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-I/"},{"title":"BM18 二维数组中的查找","text":"描述在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 [ [1,2,8,9], [2,4,9,12], [4,7,10,13], [6,8,11,15] ] 给定，返回true 给定，返回false 数据范围：矩阵的长宽满足，矩阵中的值满足进阶：空间复杂度，时间复杂度 示例1text123输入：7,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]返回值：true说明：存在7，返回true 示例2text12输入：1,[[2]]返回值：false 示例3text123输入：3,[[1,2,8,9],[2,4,9,12],[4,7,10,13],[6,8,11,15]]返回值：false说明：不存在3，返回false 解题思路 从角落开始搜索（四个角落都可以），初始化扫描起点，此函数从右上角开始扫描 如果相等，说明找到了目标元素 当前值小于目标时，说明元素可能在当前行的右边，向下移动1行 当前值大于目标时，说明元素可能在当前列的上方，向左移动1列 该算法每次可排除一行或者一列，重复步骤直到找到目标或超出数组边界 123456789101112131415161718192021222324## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param target int整型 # @param array int整型二维数组 # @return bool布尔型#class Solution: def Find(self , target: int, array: List[List[int]]) -&gt; bool: rows, cols = array.__len__(), array[0].__len__() if not array or rows == 0 or cols == 0: return False row, col = 0, cols - 1 while row &lt; rows and col &gt;= 0: if array[row][col] == target: return True elif array[row][col] &lt; target: row += 1 else: col -= 1 return False","link":"https://guodnuli.github.io/2023/08/28/BM18%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"},{"title":"BM19 寻找峰值","text":"描述给定一个长度为n的数组nums，请你找到峰值并返回其索引。数组可能包含多个峰值，在这种情况下，返回任何一个所在位置即可。 1.峰值元素是指其值严格大于左右相邻值的元素。严格大于即不能有等于 2.假设 3.对于所有有效的i都有nums[i]!=nums[i + 1] 4.你可以使用的时间复杂度实现此问题吗？ 数据范围： 如输入[2,4,1,2,7,8,4]时，会形成两个山峰，一个是索引为，峰值为的山峰，另一个是索引为，峰值为的山峰，如下图所示： 示例1text123输入：[2,4,1,2,7,8,4]返回值：1说明：4和8都是峰值元素，返回4的索引1或者8的索引5都可以 示例2text123输入：[1,2,3,1]返回值：2说明：3是峰值元素，返回其索引2 解题思路优化前代码笨方法，没有认识到问题本质是证明极值存在，相当于普通的二分法，如果在半边没有遍历到山峰(极值)时会再遍历另外一边。 12345678910111213141516171819202122232425262728293031323334353637## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## # @param nums int整型一维数组 # @return int整型#class Solution: def findPeakElement(self , nums: List[int]) -&gt; int: def check(nums: List[int], index: int) -&gt; bool: if index == 0 and nums[index + 1] &lt; nums[index]: return True elif index == len(nums) - 1 and nums[index - 1] &lt; nums[index]: return True if nums[index] &gt; nums[index - 1] and nums[index] &gt; nums[index + 1]: return True else: return False def binarySearch(nums: List[int], left: int, right: int) -&gt; int: if left &lt;= right: middle = left + (right - left) // 2 if check(nums, middle): return middle leftans = binarySearch(nums, left, middle - 1) rightans = binarySearch(nums, middle + 1, right) if leftans != -1: return leftans elif rightans != -1: return rightans return -1 if len(nums) == 1: return 0 return binarySearch(nums, 0, len(nums) - 1) 明确问题问题：找到极值点（左右两边数值严格小于极值点） 关键点：利用极值点左右的单调性 检查左右索引，相等时说明找到极值点 检查右侧单调性，nums[middle] &gt; nums[middle + 1]时说明当前为单调递减序列，说明极值点在左侧，否则说明当前为单调递增序列，极值点在右侧 递归调用binarySearch 1234567891011121314151617181920## 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可## @param nums int整型一维数组 # @return int整型#class Solution: def findPeakElement(self , nums: List[int]) -&gt; int: def binarySearch(nums: List[int], left: int, right: int) -&gt; int: if left == right: return left middle = left + (right - left) // 2 if nums[middle] &gt; nums[middle + 1]: return binarySearch(nums, left, middle) return binarySearch(nums, middle + 1, right) return binarySearch(nums, 0, len(nums) - 1)","link":"https://guodnuli.github.io/2023/08/28/BM19%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"}],"tags":[{"name":"链表,牛客网","slug":"链表-牛客网","link":"https://guodnuli.github.io/tags/%E9%93%BE%E8%A1%A8-%E7%89%9B%E5%AE%A2%E7%BD%91/"},{"name":"二分法,牛客网","slug":"二分法-牛客网","link":"https://guodnuli.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95-%E7%89%9B%E5%AE%A2%E7%BD%91/"}],"categories":[{"name":"每日一题","slug":"每日一题","link":"https://guodnuli.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"}]}